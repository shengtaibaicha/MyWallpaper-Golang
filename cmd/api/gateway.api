// goctl api go -api C:\Users\12793\Desktop\MyWallpaper\MyWallpaper-Golang\cmd\api\gateway.api -dir .
syntax = "v1"

// user
type (
	Result  {}
)

type (
	UserInfoReq  {}
)

@server (
	group:      user
	prefix:     /wallpaper/user
	middleware: JwtAuthMiddleware
)
service gateway {
	@handler UserInfo
	get /info (UserInfoReq) returns (Result)
}

// file
type (
	UploadRequest  {}
	// 定义文件上传的响应
	DownloadFileReq {
		FileName string `form:"fileName"` // MinIO 中存储的文件键（文件名/路径）
	}
	DeleteReq {
		FileId string `form:"fileId"`
	}
	CollectReq {
		FileId string `json:"fileId"`
	}
	FileUserPageReq {
		Page int32 `form:"page"`
		Size int32 `form:"size"`
	}
)

@server (
	group:      file
	prefix:     /wallpaper/file
	middleware: JwtAuthMiddleware
)
// 定义文件上传接口
service gateway {
	@handler UploadHandler
	post /upload (UploadRequest) returns (Result)

	@handler Download
	get /download (DownloadFileReq)

	@handler Delete
	delete /delete (DeleteReq) returns (Result)

	@handler Collect
	post /collect (CollectReq) returns (Result)

	@handler FileUserPage
	get /user/page (FileUserPageReq) returns (Result)
}

type (
	FindByPageReq {
		Page int32 `form:"page"`
		Size int32 `form:"size"`
	}
	FindPageByTagReq {
		Page  int32 `json:"page"`
		Size  int32 `json:"size"`
		TagId int32 `json:"tagId"`
	}
	FindPageByNameReq {
		Page int32  `form:"page"`
		Size int32  `form:"size"`
		Name string `form:"name"`
	}
	GetCaptchaReq  {}
	UserLoginReq {
		UserName     string `json:"userName"`
		UserPassword string `json:"userPassword"`
		CaptchaCode  string `json:"captchaCode"`
	}
	UserRegisterReq {
		UserName    string `json:"userName"`
		Password    string `json:"userPassword"`
		UserEmail   string `json:"userEmail"`
		CaptchaCode string `json:"captchaCode"`
	}
)

@server (
	group:  public
	prefix: /wallpaper
)
service gateway {
	@handler FindByPage // 分页查询
	get /file/find/page (FindByPageReq) returns (Result)

	@handler GetTags
	get /file/tag/tags returns (Result)

	@handler getCaptchaHandler
	get /user/captcha (GetCaptchaReq) returns (Result)

	@handler userLoginHandler
	post /user/login (UserLoginReq) returns (Result)

	@handler userRegisterHandler
	post /user/register (UserRegisterReq) returns (Result)

	@handler FindPageByTag
	post /file/tag/find/page (FindPageByTagReq) returns (Result)

	@handler FindPageByName
	get /file/find/name (FindPageByNameReq) returns (Result)
}

type (
	AuditReq {
		FileId  string `json:"fileId"`
		Audited string `json:"audited"`
	}
	AdminFindPageReq {
		Page   int32  `form:"page"`
		Size   int32  `form:"size"`
		Filter string `form:"filter"`
	}
	AdminUserPageReq {
		Page int32  `form:"page"`
		Size int32  `form:"size"`
		Role string `form:"role"`
	}
)

@server (
	group:      admin
	prefix:     /wallpaper/admin
	middleware: JwtAuthMiddleware,AdminAuthMiddleware
)
service gateway {
	@handler AdminFindPage
	get /file (AdminFindPageReq) returns (Result)

	@handler AdminAuditFile
	put /audit (AuditReq) returns (Result)

	@handler AdminUserPage
	get /user (AdminUserPageReq) returns (Result)
}

