// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: file-rpc.proto

package file

import (
	"context"

	"go-zero/apps/rpc/file/file"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DownloadFileReq    = file.DownloadFileReq
	DownloadFileResp   = file.DownloadFileResp
	FindByPageReq      = file.FindByPageReq
	FindByPageResp     = file.FindByPageResp
	FindPageByNameReq  = file.FindPageByNameReq
	FindPageByNameResp = file.FindPageByNameResp
	FindPageByTagReq   = file.FindPageByTagReq
	FindPageByTagResp  = file.FindPageByTagResp
	UploadReq          = file.UploadReq
	UploadResponse     = file.UploadResponse

	File interface {
		// 单请求上传（适合中小文件）
		UploadFile(ctx context.Context, in *UploadReq, opts ...grpc.CallOption) (*UploadResponse, error)
		FindByPage(ctx context.Context, in *FindByPageReq, opts ...grpc.CallOption) (*FindByPageResp, error)
		DownloadFile(ctx context.Context, in *DownloadFileReq, opts ...grpc.CallOption) (*DownloadFileResp, error)
		FindPageByTag(ctx context.Context, in *FindPageByTagReq, opts ...grpc.CallOption) (*FindPageByTagResp, error)
		FindPageByName(ctx context.Context, in *FindPageByNameReq, opts ...grpc.CallOption) (*FindPageByNameResp, error)
	}

	defaultFile struct {
		cli zrpc.Client
	}
)

func NewFile(cli zrpc.Client) File {
	return &defaultFile{
		cli: cli,
	}
}

// 单请求上传（适合中小文件）
func (m *defaultFile) UploadFile(ctx context.Context, in *UploadReq, opts ...grpc.CallOption) (*UploadResponse, error) {
	client := file.NewFileClient(m.cli.Conn())
	return client.UploadFile(ctx, in, opts...)
}

func (m *defaultFile) FindByPage(ctx context.Context, in *FindByPageReq, opts ...grpc.CallOption) (*FindByPageResp, error) {
	client := file.NewFileClient(m.cli.Conn())
	return client.FindByPage(ctx, in, opts...)
}

func (m *defaultFile) DownloadFile(ctx context.Context, in *DownloadFileReq, opts ...grpc.CallOption) (*DownloadFileResp, error) {
	client := file.NewFileClient(m.cli.Conn())
	return client.DownloadFile(ctx, in, opts...)
}

func (m *defaultFile) FindPageByTag(ctx context.Context, in *FindPageByTagReq, opts ...grpc.CallOption) (*FindPageByTagResp, error) {
	client := file.NewFileClient(m.cli.Conn())
	return client.FindPageByTag(ctx, in, opts...)
}

func (m *defaultFile) FindPageByName(ctx context.Context, in *FindPageByNameReq, opts ...grpc.CallOption) (*FindPageByNameResp, error) {
	client := file.NewFileClient(m.cli.Conn())
	return client.FindPageByName(ctx, in, opts...)
}
