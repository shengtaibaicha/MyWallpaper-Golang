//
//goctl rpc protoc file-rpc.proto --go_out=C:\Users\12793\Desktop\MyWallpaper\MyWallpaper-Golang\apps\rpc\file --go-grpc_out=C:\Users\12793\Desktop\MyWallpaper\MyWallpaper-Golang\apps\rpc\file --zrpc_out=C:\Users\12793\Desktop\MyWallpaper\MyWallpaper-Golang\apps\rpc\file -m

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.19.4
// source: file-rpc.proto

package file

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UploadReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	File          []byte                 `protobuf:"bytes,1,opt,name=File,proto3" json:"File,omitempty"`         // 文件数据流
	Filename      string                 `protobuf:"bytes,2,opt,name=Filename,proto3" json:"Filename,omitempty"` // 原始文件名
	Size          int64                  `protobuf:"varint,3,opt,name=Size,proto3" json:"Size,omitempty"`        // 文件大小（字节）
	MimeType      string                 `protobuf:"bytes,4,opt,name=MimeType,proto3" json:"MimeType,omitempty"` // 文件MIME类型（如image/jpeg）
	UserId        string                 `protobuf:"bytes,5,opt,name=UserId,proto3" json:"UserId,omitempty"`
	TagId         int32                  `protobuf:"varint,6,opt,name=TagId,proto3" json:"TagId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadReq) Reset() {
	*x = UploadReq{}
	mi := &file_file_rpc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadReq) ProtoMessage() {}

func (x *UploadReq) ProtoReflect() protoreflect.Message {
	mi := &file_file_rpc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadReq.ProtoReflect.Descriptor instead.
func (*UploadReq) Descriptor() ([]byte, []int) {
	return file_file_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *UploadReq) GetFile() []byte {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *UploadReq) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *UploadReq) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *UploadReq) GetMimeType() string {
	if x != nil {
		return x.MimeType
	}
	return ""
}

func (x *UploadReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UploadReq) GetTagId() int32 {
	if x != nil {
		return x.TagId
	}
	return 0
}

// 上传响应
type UploadResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	FileId        string                 `protobuf:"bytes,2,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`    // 文件唯一标识
	FileUrl       string                 `protobuf:"bytes,3,opt,name=file_url,json=fileUrl,proto3" json:"file_url,omitempty"` // 文件访问URL
	Msg           string                 `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`                        // 提示信息
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadResponse) Reset() {
	*x = UploadResponse{}
	mi := &file_file_rpc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadResponse) ProtoMessage() {}

func (x *UploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_file_rpc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadResponse.ProtoReflect.Descriptor instead.
func (*UploadResponse) Descriptor() ([]byte, []int) {
	return file_file_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *UploadResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UploadResponse) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *UploadResponse) GetFileUrl() string {
	if x != nil {
		return x.FileUrl
	}
	return ""
}

func (x *UploadResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type FindByPageReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size          int32                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindByPageReq) Reset() {
	*x = FindByPageReq{}
	mi := &file_file_rpc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindByPageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindByPageReq) ProtoMessage() {}

func (x *FindByPageReq) ProtoReflect() protoreflect.Message {
	mi := &file_file_rpc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindByPageReq.ProtoReflect.Descriptor instead.
func (*FindByPageReq) Descriptor() ([]byte, []int) {
	return file_file_rpc_proto_rawDescGZIP(), []int{2}
}

func (x *FindByPageReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FindByPageReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type FindByPageResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Records       string                 `protobuf:"bytes,1,opt,name=records,proto3" json:"records,omitempty"`
	Total         int32                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Size          int32                  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Current       int32                  `protobuf:"varint,4,opt,name=current,proto3" json:"current,omitempty"`
	Pages         int32                  `protobuf:"varint,5,opt,name=pages,proto3" json:"pages,omitempty"`
	Collect       map[string]bool        `protobuf:"bytes,6,rep,name=collect,proto3" json:"collect,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindByPageResp) Reset() {
	*x = FindByPageResp{}
	mi := &file_file_rpc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindByPageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindByPageResp) ProtoMessage() {}

func (x *FindByPageResp) ProtoReflect() protoreflect.Message {
	mi := &file_file_rpc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindByPageResp.ProtoReflect.Descriptor instead.
func (*FindByPageResp) Descriptor() ([]byte, []int) {
	return file_file_rpc_proto_rawDescGZIP(), []int{3}
}

func (x *FindByPageResp) GetRecords() string {
	if x != nil {
		return x.Records
	}
	return ""
}

func (x *FindByPageResp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *FindByPageResp) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FindByPageResp) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *FindByPageResp) GetPages() int32 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *FindByPageResp) GetCollect() map[string]bool {
	if x != nil {
		return x.Collect
	}
	return nil
}

type DownloadFileReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileName      string                 `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadFileReq) Reset() {
	*x = DownloadFileReq{}
	mi := &file_file_rpc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadFileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadFileReq) ProtoMessage() {}

func (x *DownloadFileReq) ProtoReflect() protoreflect.Message {
	mi := &file_file_rpc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadFileReq.ProtoReflect.Descriptor instead.
func (*DownloadFileReq) Descriptor() ([]byte, []int) {
	return file_file_rpc_proto_rawDescGZIP(), []int{4}
}

func (x *DownloadFileReq) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

type DownloadFileResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Content       []byte                 `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`         // 文件二进制内容
	FileName      string                 `protobuf:"bytes,2,opt,name=fileName,proto3" json:"fileName,omitempty"`       // 文件名
	ContentType   string                 `protobuf:"bytes,3,opt,name=contentType,proto3" json:"contentType,omitempty"` // MIME 类型（如 "image/jpeg"）
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DownloadFileResp) Reset() {
	*x = DownloadFileResp{}
	mi := &file_file_rpc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DownloadFileResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownloadFileResp) ProtoMessage() {}

func (x *DownloadFileResp) ProtoReflect() protoreflect.Message {
	mi := &file_file_rpc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownloadFileResp.ProtoReflect.Descriptor instead.
func (*DownloadFileResp) Descriptor() ([]byte, []int) {
	return file_file_rpc_proto_rawDescGZIP(), []int{5}
}

func (x *DownloadFileResp) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *DownloadFileResp) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *DownloadFileResp) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

type FindPageByTagReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size          int32                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	TagId         int32                  `protobuf:"varint,3,opt,name=tagId,proto3" json:"tagId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindPageByTagReq) Reset() {
	*x = FindPageByTagReq{}
	mi := &file_file_rpc_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindPageByTagReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindPageByTagReq) ProtoMessage() {}

func (x *FindPageByTagReq) ProtoReflect() protoreflect.Message {
	mi := &file_file_rpc_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindPageByTagReq.ProtoReflect.Descriptor instead.
func (*FindPageByTagReq) Descriptor() ([]byte, []int) {
	return file_file_rpc_proto_rawDescGZIP(), []int{6}
}

func (x *FindPageByTagReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FindPageByTagReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FindPageByTagReq) GetTagId() int32 {
	if x != nil {
		return x.TagId
	}
	return 0
}

type FindPageByTagResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Records       string                 `protobuf:"bytes,1,opt,name=records,proto3" json:"records,omitempty"`
	Total         int32                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Size          int32                  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Current       int32                  `protobuf:"varint,4,opt,name=current,proto3" json:"current,omitempty"`
	Pages         int32                  `protobuf:"varint,5,opt,name=pages,proto3" json:"pages,omitempty"`
	Collect       map[string]bool        `protobuf:"bytes,6,rep,name=collect,proto3" json:"collect,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindPageByTagResp) Reset() {
	*x = FindPageByTagResp{}
	mi := &file_file_rpc_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindPageByTagResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindPageByTagResp) ProtoMessage() {}

func (x *FindPageByTagResp) ProtoReflect() protoreflect.Message {
	mi := &file_file_rpc_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindPageByTagResp.ProtoReflect.Descriptor instead.
func (*FindPageByTagResp) Descriptor() ([]byte, []int) {
	return file_file_rpc_proto_rawDescGZIP(), []int{7}
}

func (x *FindPageByTagResp) GetRecords() string {
	if x != nil {
		return x.Records
	}
	return ""
}

func (x *FindPageByTagResp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *FindPageByTagResp) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FindPageByTagResp) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *FindPageByTagResp) GetPages() int32 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *FindPageByTagResp) GetCollect() map[string]bool {
	if x != nil {
		return x.Collect
	}
	return nil
}

type FindPageByNameReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size          int32                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindPageByNameReq) Reset() {
	*x = FindPageByNameReq{}
	mi := &file_file_rpc_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindPageByNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindPageByNameReq) ProtoMessage() {}

func (x *FindPageByNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_file_rpc_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindPageByNameReq.ProtoReflect.Descriptor instead.
func (*FindPageByNameReq) Descriptor() ([]byte, []int) {
	return file_file_rpc_proto_rawDescGZIP(), []int{8}
}

func (x *FindPageByNameReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FindPageByNameReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FindPageByNameReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type FindPageByNameResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Records       string                 `protobuf:"bytes,1,opt,name=records,proto3" json:"records,omitempty"`
	Total         int32                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Size          int32                  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Current       int32                  `protobuf:"varint,4,opt,name=current,proto3" json:"current,omitempty"`
	Pages         int32                  `protobuf:"varint,5,opt,name=pages,proto3" json:"pages,omitempty"`
	Collect       map[string]bool        `protobuf:"bytes,6,rep,name=collect,proto3" json:"collect,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FindPageByNameResp) Reset() {
	*x = FindPageByNameResp{}
	mi := &file_file_rpc_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindPageByNameResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindPageByNameResp) ProtoMessage() {}

func (x *FindPageByNameResp) ProtoReflect() protoreflect.Message {
	mi := &file_file_rpc_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindPageByNameResp.ProtoReflect.Descriptor instead.
func (*FindPageByNameResp) Descriptor() ([]byte, []int) {
	return file_file_rpc_proto_rawDescGZIP(), []int{9}
}

func (x *FindPageByNameResp) GetRecords() string {
	if x != nil {
		return x.Records
	}
	return ""
}

func (x *FindPageByNameResp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *FindPageByNameResp) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FindPageByNameResp) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *FindPageByNameResp) GetPages() int32 {
	if x != nil {
		return x.Pages
	}
	return 0
}

func (x *FindPageByNameResp) GetCollect() map[string]bool {
	if x != nil {
		return x.Collect
	}
	return nil
}

type DeleteFileReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileId        string                 `protobuf:"bytes,1,opt,name=FileId,proto3" json:"FileId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteFileReq) Reset() {
	*x = DeleteFileReq{}
	mi := &file_file_rpc_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFileReq) ProtoMessage() {}

func (x *DeleteFileReq) ProtoReflect() protoreflect.Message {
	mi := &file_file_rpc_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFileReq.ProtoReflect.Descriptor instead.
func (*DeleteFileReq) Descriptor() ([]byte, []int) {
	return file_file_rpc_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteFileReq) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

type DeleteFileResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteFileResp) Reset() {
	*x = DeleteFileResp{}
	mi := &file_file_rpc_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteFileResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFileResp) ProtoMessage() {}

func (x *DeleteFileResp) ProtoReflect() protoreflect.Message {
	mi := &file_file_rpc_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFileResp.ProtoReflect.Descriptor instead.
func (*DeleteFileResp) Descriptor() ([]byte, []int) {
	return file_file_rpc_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteFileResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteFileResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type CollectFileReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileId        string                 `protobuf:"bytes,1,opt,name=FileId,proto3" json:"FileId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CollectFileReq) Reset() {
	*x = CollectFileReq{}
	mi := &file_file_rpc_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CollectFileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectFileReq) ProtoMessage() {}

func (x *CollectFileReq) ProtoReflect() protoreflect.Message {
	mi := &file_file_rpc_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectFileReq.ProtoReflect.Descriptor instead.
func (*CollectFileReq) Descriptor() ([]byte, []int) {
	return file_file_rpc_proto_rawDescGZIP(), []int{12}
}

func (x *CollectFileReq) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

type CollectFileResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CollectFileResp) Reset() {
	*x = CollectFileResp{}
	mi := &file_file_rpc_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CollectFileResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectFileResp) ProtoMessage() {}

func (x *CollectFileResp) ProtoReflect() protoreflect.Message {
	mi := &file_file_rpc_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectFileResp.ProtoReflect.Descriptor instead.
func (*CollectFileResp) Descriptor() ([]byte, []int) {
	return file_file_rpc_proto_rawDescGZIP(), []int{13}
}

func (x *CollectFileResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CollectFileResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type FileUserPageReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Size          int32                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileUserPageReq) Reset() {
	*x = FileUserPageReq{}
	mi := &file_file_rpc_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileUserPageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileUserPageReq) ProtoMessage() {}

func (x *FileUserPageReq) ProtoReflect() protoreflect.Message {
	mi := &file_file_rpc_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileUserPageReq.ProtoReflect.Descriptor instead.
func (*FileUserPageReq) Descriptor() ([]byte, []int) {
	return file_file_rpc_proto_rawDescGZIP(), []int{14}
}

func (x *FileUserPageReq) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *FileUserPageReq) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type FileUserPageResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Records       string                 `protobuf:"bytes,1,opt,name=records,proto3" json:"records,omitempty"`
	Total         int32                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Size          int32                  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Current       int32                  `protobuf:"varint,4,opt,name=current,proto3" json:"current,omitempty"`
	Pages         int32                  `protobuf:"varint,5,opt,name=pages,proto3" json:"pages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FileUserPageResp) Reset() {
	*x = FileUserPageResp{}
	mi := &file_file_rpc_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FileUserPageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileUserPageResp) ProtoMessage() {}

func (x *FileUserPageResp) ProtoReflect() protoreflect.Message {
	mi := &file_file_rpc_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileUserPageResp.ProtoReflect.Descriptor instead.
func (*FileUserPageResp) Descriptor() ([]byte, []int) {
	return file_file_rpc_proto_rawDescGZIP(), []int{15}
}

func (x *FileUserPageResp) GetRecords() string {
	if x != nil {
		return x.Records
	}
	return ""
}

func (x *FileUserPageResp) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *FileUserPageResp) GetSize() int32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileUserPageResp) GetCurrent() int32 {
	if x != nil {
		return x.Current
	}
	return 0
}

func (x *FileUserPageResp) GetPages() int32 {
	if x != nil {
		return x.Pages
	}
	return 0
}

type GetTagsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTagsReq) Reset() {
	*x = GetTagsReq{}
	mi := &file_file_rpc_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTagsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTagsReq) ProtoMessage() {}

func (x *GetTagsReq) ProtoReflect() protoreflect.Message {
	mi := &file_file_rpc_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTagsReq.ProtoReflect.Descriptor instead.
func (*GetTagsReq) Descriptor() ([]byte, []int) {
	return file_file_rpc_proto_rawDescGZIP(), []int{16}
}

type GetTagsResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tags          string                 `protobuf:"bytes,1,opt,name=tags,proto3" json:"tags,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTagsResp) Reset() {
	*x = GetTagsResp{}
	mi := &file_file_rpc_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTagsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTagsResp) ProtoMessage() {}

func (x *GetTagsResp) ProtoReflect() protoreflect.Message {
	mi := &file_file_rpc_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTagsResp.ProtoReflect.Descriptor instead.
func (*GetTagsResp) Descriptor() ([]byte, []int) {
	return file_file_rpc_proto_rawDescGZIP(), []int{17}
}

func (x *GetTagsResp) GetTags() string {
	if x != nil {
		return x.Tags
	}
	return ""
}

type AuditFileReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FileId        string                 `protobuf:"bytes,1,opt,name=fileId,proto3" json:"fileId,omitempty"`
	Audited       string                 `protobuf:"bytes,2,opt,name=audited,proto3" json:"audited,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuditFileReq) Reset() {
	*x = AuditFileReq{}
	mi := &file_file_rpc_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditFileReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditFileReq) ProtoMessage() {}

func (x *AuditFileReq) ProtoReflect() protoreflect.Message {
	mi := &file_file_rpc_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditFileReq.ProtoReflect.Descriptor instead.
func (*AuditFileReq) Descriptor() ([]byte, []int) {
	return file_file_rpc_proto_rawDescGZIP(), []int{18}
}

func (x *AuditFileReq) GetFileId() string {
	if x != nil {
		return x.FileId
	}
	return ""
}

func (x *AuditFileReq) GetAudited() string {
	if x != nil {
		return x.Audited
	}
	return ""
}

type AuditFileResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Msg           string                 `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AuditFileResp) Reset() {
	*x = AuditFileResp{}
	mi := &file_file_rpc_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AuditFileResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditFileResp) ProtoMessage() {}

func (x *AuditFileResp) ProtoReflect() protoreflect.Message {
	mi := &file_file_rpc_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditFileResp.ProtoReflect.Descriptor instead.
func (*AuditFileResp) Descriptor() ([]byte, []int) {
	return file_file_rpc_proto_rawDescGZIP(), []int{19}
}

func (x *AuditFileResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AuditFileResp) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

var File_file_rpc_proto protoreflect.FileDescriptor

const file_file_rpc_proto_rawDesc = "" +
	"\n" +
	"\x0efile-rpc.proto\x12\x04file\"\x99\x01\n" +
	"\tUploadReq\x12\x12\n" +
	"\x04File\x18\x01 \x01(\fR\x04File\x12\x1a\n" +
	"\bFilename\x18\x02 \x01(\tR\bFilename\x12\x12\n" +
	"\x04Size\x18\x03 \x01(\x03R\x04Size\x12\x1a\n" +
	"\bMimeType\x18\x04 \x01(\tR\bMimeType\x12\x16\n" +
	"\x06UserId\x18\x05 \x01(\tR\x06UserId\x12\x14\n" +
	"\x05TagId\x18\x06 \x01(\x05R\x05TagId\"p\n" +
	"\x0eUploadResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x17\n" +
	"\afile_id\x18\x02 \x01(\tR\x06fileId\x12\x19\n" +
	"\bfile_url\x18\x03 \x01(\tR\afileUrl\x12\x10\n" +
	"\x03msg\x18\x04 \x01(\tR\x03msg\"7\n" +
	"\rFindByPageReq\x12\x12\n" +
	"\x04page\x18\x01 \x01(\x05R\x04page\x12\x12\n" +
	"\x04size\x18\x02 \x01(\x05R\x04size\"\xfd\x01\n" +
	"\x0eFindByPageResp\x12\x18\n" +
	"\arecords\x18\x01 \x01(\tR\arecords\x12\x14\n" +
	"\x05total\x18\x02 \x01(\x05R\x05total\x12\x12\n" +
	"\x04size\x18\x03 \x01(\x05R\x04size\x12\x18\n" +
	"\acurrent\x18\x04 \x01(\x05R\acurrent\x12\x14\n" +
	"\x05pages\x18\x05 \x01(\x05R\x05pages\x12;\n" +
	"\acollect\x18\x06 \x03(\v2!.file.FindByPageResp.CollectEntryR\acollect\x1a:\n" +
	"\fCollectEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\"-\n" +
	"\x0fDownloadFileReq\x12\x1a\n" +
	"\bfileName\x18\x01 \x01(\tR\bfileName\"j\n" +
	"\x10DownloadFileResp\x12\x18\n" +
	"\acontent\x18\x01 \x01(\fR\acontent\x12\x1a\n" +
	"\bfileName\x18\x02 \x01(\tR\bfileName\x12 \n" +
	"\vcontentType\x18\x03 \x01(\tR\vcontentType\"P\n" +
	"\x10FindPageByTagReq\x12\x12\n" +
	"\x04page\x18\x01 \x01(\x05R\x04page\x12\x12\n" +
	"\x04size\x18\x02 \x01(\x05R\x04size\x12\x14\n" +
	"\x05tagId\x18\x03 \x01(\x05R\x05tagId\"\x83\x02\n" +
	"\x11FindPageByTagResp\x12\x18\n" +
	"\arecords\x18\x01 \x01(\tR\arecords\x12\x14\n" +
	"\x05total\x18\x02 \x01(\x05R\x05total\x12\x12\n" +
	"\x04size\x18\x03 \x01(\x05R\x04size\x12\x18\n" +
	"\acurrent\x18\x04 \x01(\x05R\acurrent\x12\x14\n" +
	"\x05pages\x18\x05 \x01(\x05R\x05pages\x12>\n" +
	"\acollect\x18\x06 \x03(\v2$.file.FindPageByTagResp.CollectEntryR\acollect\x1a:\n" +
	"\fCollectEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\"O\n" +
	"\x11FindPageByNameReq\x12\x12\n" +
	"\x04page\x18\x01 \x01(\x05R\x04page\x12\x12\n" +
	"\x04size\x18\x02 \x01(\x05R\x04size\x12\x12\n" +
	"\x04name\x18\x03 \x01(\tR\x04name\"\x85\x02\n" +
	"\x12FindPageByNameResp\x12\x18\n" +
	"\arecords\x18\x01 \x01(\tR\arecords\x12\x14\n" +
	"\x05total\x18\x02 \x01(\x05R\x05total\x12\x12\n" +
	"\x04size\x18\x03 \x01(\x05R\x04size\x12\x18\n" +
	"\acurrent\x18\x04 \x01(\x05R\acurrent\x12\x14\n" +
	"\x05pages\x18\x05 \x01(\x05R\x05pages\x12?\n" +
	"\acollect\x18\x06 \x03(\v2%.file.FindPageByNameResp.CollectEntryR\acollect\x1a:\n" +
	"\fCollectEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\"'\n" +
	"\rDeleteFileReq\x12\x16\n" +
	"\x06FileId\x18\x01 \x01(\tR\x06FileId\"<\n" +
	"\x0eDeleteFileResp\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x10\n" +
	"\x03msg\x18\x02 \x01(\tR\x03msg\"(\n" +
	"\x0eCollectFileReq\x12\x16\n" +
	"\x06FileId\x18\x01 \x01(\tR\x06FileId\"=\n" +
	"\x0fCollectFileResp\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x10\n" +
	"\x03msg\x18\x02 \x01(\tR\x03msg\"9\n" +
	"\x0fFileUserPageReq\x12\x12\n" +
	"\x04page\x18\x01 \x01(\x05R\x04page\x12\x12\n" +
	"\x04size\x18\x02 \x01(\x05R\x04size\"\x86\x01\n" +
	"\x10FileUserPageResp\x12\x18\n" +
	"\arecords\x18\x01 \x01(\tR\arecords\x12\x14\n" +
	"\x05total\x18\x02 \x01(\x05R\x05total\x12\x12\n" +
	"\x04size\x18\x03 \x01(\x05R\x04size\x12\x18\n" +
	"\acurrent\x18\x04 \x01(\x05R\acurrent\x12\x14\n" +
	"\x05pages\x18\x05 \x01(\x05R\x05pages\"\f\n" +
	"\n" +
	"GetTagsReq\"!\n" +
	"\vGetTagsResp\x12\x12\n" +
	"\x04tags\x18\x01 \x01(\tR\x04tags\"@\n" +
	"\fAuditFileReq\x12\x16\n" +
	"\x06fileId\x18\x01 \x01(\tR\x06fileId\x12\x18\n" +
	"\aaudited\x18\x02 \x01(\tR\aaudited\";\n" +
	"\rAuditFileResp\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x10\n" +
	"\x03msg\x18\x02 \x01(\tR\x03msg2\xd4\x04\n" +
	"\x04File\x123\n" +
	"\n" +
	"UploadFile\x12\x0f.file.UploadReq\x1a\x14.file.UploadResponse\x127\n" +
	"\n" +
	"FindByPage\x12\x13.file.FindByPageReq\x1a\x14.file.FindByPageResp\x12=\n" +
	"\fDownloadFile\x12\x15.file.DownloadFileReq\x1a\x16.file.DownloadFileResp\x12@\n" +
	"\rFindPageByTag\x12\x16.file.FindPageByTagReq\x1a\x17.file.FindPageByTagResp\x12C\n" +
	"\x0eFindPageByName\x12\x17.file.FindPageByNameReq\x1a\x18.file.FindPageByNameResp\x127\n" +
	"\n" +
	"DeleteFile\x12\x13.file.DeleteFileReq\x1a\x14.file.DeleteFileResp\x12:\n" +
	"\vCollectFile\x12\x14.file.CollectFileReq\x1a\x15.file.CollectFileResp\x12=\n" +
	"\fFileUserPage\x12\x15.file.FileUserPageReq\x1a\x16.file.FileUserPageResp\x12.\n" +
	"\aGetTags\x12\x10.file.GetTagsReq\x1a\x11.file.GetTagsResp\x124\n" +
	"\tAuditFile\x12\x12.file.AuditFileReq\x1a\x13.file.AuditFileRespB\bZ\x06./fileb\x06proto3"

var (
	file_file_rpc_proto_rawDescOnce sync.Once
	file_file_rpc_proto_rawDescData []byte
)

func file_file_rpc_proto_rawDescGZIP() []byte {
	file_file_rpc_proto_rawDescOnce.Do(func() {
		file_file_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_file_rpc_proto_rawDesc), len(file_file_rpc_proto_rawDesc)))
	})
	return file_file_rpc_proto_rawDescData
}

var file_file_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_file_rpc_proto_goTypes = []any{
	(*UploadReq)(nil),          // 0: file.UploadReq
	(*UploadResponse)(nil),     // 1: file.UploadResponse
	(*FindByPageReq)(nil),      // 2: file.FindByPageReq
	(*FindByPageResp)(nil),     // 3: file.FindByPageResp
	(*DownloadFileReq)(nil),    // 4: file.DownloadFileReq
	(*DownloadFileResp)(nil),   // 5: file.DownloadFileResp
	(*FindPageByTagReq)(nil),   // 6: file.FindPageByTagReq
	(*FindPageByTagResp)(nil),  // 7: file.FindPageByTagResp
	(*FindPageByNameReq)(nil),  // 8: file.FindPageByNameReq
	(*FindPageByNameResp)(nil), // 9: file.FindPageByNameResp
	(*DeleteFileReq)(nil),      // 10: file.DeleteFileReq
	(*DeleteFileResp)(nil),     // 11: file.DeleteFileResp
	(*CollectFileReq)(nil),     // 12: file.CollectFileReq
	(*CollectFileResp)(nil),    // 13: file.CollectFileResp
	(*FileUserPageReq)(nil),    // 14: file.FileUserPageReq
	(*FileUserPageResp)(nil),   // 15: file.FileUserPageResp
	(*GetTagsReq)(nil),         // 16: file.GetTagsReq
	(*GetTagsResp)(nil),        // 17: file.GetTagsResp
	(*AuditFileReq)(nil),       // 18: file.AuditFileReq
	(*AuditFileResp)(nil),      // 19: file.AuditFileResp
	nil,                        // 20: file.FindByPageResp.CollectEntry
	nil,                        // 21: file.FindPageByTagResp.CollectEntry
	nil,                        // 22: file.FindPageByNameResp.CollectEntry
}
var file_file_rpc_proto_depIdxs = []int32{
	20, // 0: file.FindByPageResp.collect:type_name -> file.FindByPageResp.CollectEntry
	21, // 1: file.FindPageByTagResp.collect:type_name -> file.FindPageByTagResp.CollectEntry
	22, // 2: file.FindPageByNameResp.collect:type_name -> file.FindPageByNameResp.CollectEntry
	0,  // 3: file.File.UploadFile:input_type -> file.UploadReq
	2,  // 4: file.File.FindByPage:input_type -> file.FindByPageReq
	4,  // 5: file.File.DownloadFile:input_type -> file.DownloadFileReq
	6,  // 6: file.File.FindPageByTag:input_type -> file.FindPageByTagReq
	8,  // 7: file.File.FindPageByName:input_type -> file.FindPageByNameReq
	10, // 8: file.File.DeleteFile:input_type -> file.DeleteFileReq
	12, // 9: file.File.CollectFile:input_type -> file.CollectFileReq
	14, // 10: file.File.FileUserPage:input_type -> file.FileUserPageReq
	16, // 11: file.File.GetTags:input_type -> file.GetTagsReq
	18, // 12: file.File.AuditFile:input_type -> file.AuditFileReq
	1,  // 13: file.File.UploadFile:output_type -> file.UploadResponse
	3,  // 14: file.File.FindByPage:output_type -> file.FindByPageResp
	5,  // 15: file.File.DownloadFile:output_type -> file.DownloadFileResp
	7,  // 16: file.File.FindPageByTag:output_type -> file.FindPageByTagResp
	9,  // 17: file.File.FindPageByName:output_type -> file.FindPageByNameResp
	11, // 18: file.File.DeleteFile:output_type -> file.DeleteFileResp
	13, // 19: file.File.CollectFile:output_type -> file.CollectFileResp
	15, // 20: file.File.FileUserPage:output_type -> file.FileUserPageResp
	17, // 21: file.File.GetTags:output_type -> file.GetTagsResp
	19, // 22: file.File.AuditFile:output_type -> file.AuditFileResp
	13, // [13:23] is the sub-list for method output_type
	3,  // [3:13] is the sub-list for method input_type
	3,  // [3:3] is the sub-list for extension type_name
	3,  // [3:3] is the sub-list for extension extendee
	0,  // [0:3] is the sub-list for field type_name
}

func init() { file_file_rpc_proto_init() }
func file_file_rpc_proto_init() {
	if File_file_rpc_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_file_rpc_proto_rawDesc), len(file_file_rpc_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_file_rpc_proto_goTypes,
		DependencyIndexes: file_file_rpc_proto_depIdxs,
		MessageInfos:      file_file_rpc_proto_msgTypes,
	}.Build()
	File_file_rpc_proto = out.File
	file_file_rpc_proto_goTypes = nil
	file_file_rpc_proto_depIdxs = nil
}
