//
//goctl rpc protoc file-rpc.proto --go_out=C:\Users\12793\Desktop\golang\go-zero\apps\rpc\file --go-grpc_out=C:\Users\12793\Desktop\golang\go-zero\apps\rpc\file --zrpc_out=C:\Users\12793\Desktop\golang\go-zero\apps\rpc\file -m

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: file-rpc.proto

package file

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	File_UploadFile_FullMethodName     = "/file.File/UploadFile"
	File_FindByPage_FullMethodName     = "/file.File/FindByPage"
	File_DownloadFile_FullMethodName   = "/file.File/DownloadFile"
	File_FindPageByTag_FullMethodName  = "/file.File/FindPageByTag"
	File_FindPageByName_FullMethodName = "/file.File/FindPageByName"
	File_DeleteFile_FullMethodName     = "/file.File/DeleteFile"
	File_CollectFile_FullMethodName    = "/file.File/CollectFile"
	File_FileUserPage_FullMethodName   = "/file.File/FileUserPage"
)

// FileClient is the client API for File service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 文件上传服务
type FileClient interface {
	// 单请求上传（适合中小文件）
	UploadFile(ctx context.Context, in *UploadReq, opts ...grpc.CallOption) (*UploadResponse, error)
	FindByPage(ctx context.Context, in *FindByPageReq, opts ...grpc.CallOption) (*FindByPageResp, error)
	DownloadFile(ctx context.Context, in *DownloadFileReq, opts ...grpc.CallOption) (*DownloadFileResp, error)
	FindPageByTag(ctx context.Context, in *FindPageByTagReq, opts ...grpc.CallOption) (*FindPageByTagResp, error)
	FindPageByName(ctx context.Context, in *FindPageByNameReq, opts ...grpc.CallOption) (*FindPageByNameResp, error)
	DeleteFile(ctx context.Context, in *DeleteFileReq, opts ...grpc.CallOption) (*DeleteFileResp, error)
	CollectFile(ctx context.Context, in *CollectFileReq, opts ...grpc.CallOption) (*CollectFileResp, error)
	FileUserPage(ctx context.Context, in *FileUserPageReq, opts ...grpc.CallOption) (*FileUserPageResp, error)
}

type fileClient struct {
	cc grpc.ClientConnInterface
}

func NewFileClient(cc grpc.ClientConnInterface) FileClient {
	return &fileClient{cc}
}

func (c *fileClient) UploadFile(ctx context.Context, in *UploadReq, opts ...grpc.CallOption) (*UploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadResponse)
	err := c.cc.Invoke(ctx, File_UploadFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) FindByPage(ctx context.Context, in *FindByPageReq, opts ...grpc.CallOption) (*FindByPageResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindByPageResp)
	err := c.cc.Invoke(ctx, File_FindByPage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) DownloadFile(ctx context.Context, in *DownloadFileReq, opts ...grpc.CallOption) (*DownloadFileResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DownloadFileResp)
	err := c.cc.Invoke(ctx, File_DownloadFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) FindPageByTag(ctx context.Context, in *FindPageByTagReq, opts ...grpc.CallOption) (*FindPageByTagResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindPageByTagResp)
	err := c.cc.Invoke(ctx, File_FindPageByTag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) FindPageByName(ctx context.Context, in *FindPageByNameReq, opts ...grpc.CallOption) (*FindPageByNameResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindPageByNameResp)
	err := c.cc.Invoke(ctx, File_FindPageByName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) DeleteFile(ctx context.Context, in *DeleteFileReq, opts ...grpc.CallOption) (*DeleteFileResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFileResp)
	err := c.cc.Invoke(ctx, File_DeleteFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) CollectFile(ctx context.Context, in *CollectFileReq, opts ...grpc.CallOption) (*CollectFileResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CollectFileResp)
	err := c.cc.Invoke(ctx, File_CollectFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileClient) FileUserPage(ctx context.Context, in *FileUserPageReq, opts ...grpc.CallOption) (*FileUserPageResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FileUserPageResp)
	err := c.cc.Invoke(ctx, File_FileUserPage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServer is the server API for File service.
// All implementations must embed UnimplementedFileServer
// for forward compatibility.
//
// 文件上传服务
type FileServer interface {
	// 单请求上传（适合中小文件）
	UploadFile(context.Context, *UploadReq) (*UploadResponse, error)
	FindByPage(context.Context, *FindByPageReq) (*FindByPageResp, error)
	DownloadFile(context.Context, *DownloadFileReq) (*DownloadFileResp, error)
	FindPageByTag(context.Context, *FindPageByTagReq) (*FindPageByTagResp, error)
	FindPageByName(context.Context, *FindPageByNameReq) (*FindPageByNameResp, error)
	DeleteFile(context.Context, *DeleteFileReq) (*DeleteFileResp, error)
	CollectFile(context.Context, *CollectFileReq) (*CollectFileResp, error)
	FileUserPage(context.Context, *FileUserPageReq) (*FileUserPageResp, error)
	mustEmbedUnimplementedFileServer()
}

// UnimplementedFileServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileServer struct{}

func (UnimplementedFileServer) UploadFile(context.Context, *UploadReq) (*UploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedFileServer) FindByPage(context.Context, *FindByPageReq) (*FindByPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByPage not implemented")
}
func (UnimplementedFileServer) DownloadFile(context.Context, *DownloadFileReq) (*DownloadFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedFileServer) FindPageByTag(context.Context, *FindPageByTagReq) (*FindPageByTagResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPageByTag not implemented")
}
func (UnimplementedFileServer) FindPageByName(context.Context, *FindPageByNameReq) (*FindPageByNameResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindPageByName not implemented")
}
func (UnimplementedFileServer) DeleteFile(context.Context, *DeleteFileReq) (*DeleteFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedFileServer) CollectFile(context.Context, *CollectFileReq) (*CollectFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectFile not implemented")
}
func (UnimplementedFileServer) FileUserPage(context.Context, *FileUserPageReq) (*FileUserPageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileUserPage not implemented")
}
func (UnimplementedFileServer) mustEmbedUnimplementedFileServer() {}
func (UnimplementedFileServer) testEmbeddedByValue()              {}

// UnsafeFileServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServer will
// result in compilation errors.
type UnsafeFileServer interface {
	mustEmbedUnimplementedFileServer()
}

func RegisterFileServer(s grpc.ServiceRegistrar, srv FileServer) {
	// If the following call pancis, it indicates UnimplementedFileServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&File_ServiceDesc, srv)
}

func _File_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: File_UploadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).UploadFile(ctx, req.(*UploadReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_FindByPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).FindByPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: File_FindByPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).FindByPage(ctx, req.(*FindByPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_DownloadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).DownloadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: File_DownloadFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).DownloadFile(ctx, req.(*DownloadFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_FindPageByTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPageByTagReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).FindPageByTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: File_FindPageByTag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).FindPageByTag(ctx, req.(*FindPageByTagReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_FindPageByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindPageByNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).FindPageByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: File_FindPageByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).FindPageByName(ctx, req.(*FindPageByNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: File_DeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).DeleteFile(ctx, req.(*DeleteFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_CollectFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).CollectFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: File_CollectFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).CollectFile(ctx, req.(*CollectFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _File_FileUserPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileUserPageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServer).FileUserPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: File_FileUserPage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServer).FileUserPage(ctx, req.(*FileUserPageReq))
	}
	return interceptor(ctx, in, info, handler)
}

// File_ServiceDesc is the grpc.ServiceDesc for File service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var File_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "file.File",
	HandlerType: (*FileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadFile",
			Handler:    _File_UploadFile_Handler,
		},
		{
			MethodName: "FindByPage",
			Handler:    _File_FindByPage_Handler,
		},
		{
			MethodName: "DownloadFile",
			Handler:    _File_DownloadFile_Handler,
		},
		{
			MethodName: "FindPageByTag",
			Handler:    _File_FindPageByTag_Handler,
		},
		{
			MethodName: "FindPageByName",
			Handler:    _File_FindPageByName_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _File_DeleteFile_Handler,
		},
		{
			MethodName: "CollectFile",
			Handler:    _File_CollectFile_Handler,
		},
		{
			MethodName: "FileUserPage",
			Handler:    _File_FileUserPage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "file-rpc.proto",
}
