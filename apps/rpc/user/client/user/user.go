// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.5
// Source: user-rpc.proto

package user

import (
	"context"

	"go-zero/apps/rpc/user/user"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AdminFindPageReq      = user.AdminFindPageReq
	AdminFindPageResp     = user.AdminFindPageResp
	AdminFindUserPageReq  = user.AdminFindUserPageReq
	AdminFindUserPageResp = user.AdminFindUserPageResp
	InfoReq               = user.InfoReq
	InfoResp              = user.InfoResp
	LoginReq              = user.LoginReq
	LoginResp             = user.LoginResp
	RegisterReq           = user.RegisterReq
	RegisterResp          = user.RegisterResp

	User interface {
		UserLogin(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
		UserRegister(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
		UserInfo(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error)
	}

	defaultUser struct {
		cli zrpc.Client
	}
)

func NewUser(cli zrpc.Client) User {
	return &defaultUser{
		cli: cli,
	}
}

func (m *defaultUser) UserLogin(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UserLogin(ctx, in, opts...)
}

func (m *defaultUser) UserRegister(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UserRegister(ctx, in, opts...)
}

func (m *defaultUser) UserInfo(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error) {
	client := user.NewUserClient(m.cli.Conn())
	return client.UserInfo(ctx, in, opts...)
}
